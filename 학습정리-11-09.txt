1. 아래의 출력이 나오도록 만드시오.

public class HashPerson {
	public static void main(String[] args) {
		HashSet<Person> hSet = new HashSet<Person>();
		
		hSet.add(new Person("LEE", 10));
		hSet.add(new Person("LEE", 10));
		hSet.add(new Person("PARK", 35));
		hSet.add(new Person("PARK", 35));

		System.out.println("저장된 데이터 수: " + hSet.size());
		//System.out.println(hSet);
	}
}

/*
저장된 데이터 수: 2
[LEE(10세), PARK(35세)]
*/

class Person {
	
	private String name;
	private int age;
	
	public Person(String name, int age) {
		this.name = name;
		this.age = age;
	}
	
	@Override
	public String toString() {
		return name + "(" + age + "세)";
	}
	
	@Override
	public int hashCode() {
		return age/10;
	}
	
	@Override
	public boolean equals(Object obj) {
		
		if(obj instanceof Person) {
			Person person = (Person1)obj;
			if(person.name.equals(this.name) && this.age == person.age) {
				return true;
			}
		}
		return false;
		
		/*
		if(this.name.equals(((Person)obj).name) && this.age == ((Person)obj).age) {
			return true;
		}
		else {
			return false;
		}
		*/
	}
	
}


2. 아래와 같이 출력이 나오도록 프로그래밍을 하시오.

        HashSet<Num> set = new HashSet<>();
        set.add(new Num(7799));
        set.add(new Num(9955));
        set.add(new Num(7799));

        System.out.println("인스턴스 수: " + set.size());

        for(Num n : set)
            System.out.print(n.toString() + '\t');

        System.out.println();

/*
====출력
인스턴스 수: 2
7799	9955
*/

class Num{
	
	private int num;
	
	public Num(int n) {
		num = n;
	}
	
	@Override
	public String toString() {
		return String.valueOf(num);
	}
	
	//1. hashcode() - 해쉬 알고리즘 - 분류 한다(속도)
	@Override
	public int hashCode() {
		return num % 3;
	}
	
	//2. 동등 비교를 위해 - true면 동등 false면 다름 : 이 로직은 개발자가 짜야함
	@Override
	public boolean equals(Object obj) {
		if(num == ((Num)obj).num) {
			return true;
		}
		else {
			return false;
		}
	}
		
}


3.ThreeSet 과 HashSet 의 차이는?


4.하나의 학생 정보를 나타내는 Student 클래스에는 이름, 학과, 학번, 학점 평균을 저장하는 필드가 있다.

(1) 학생마다 Student 객체를 생성하고 4명의 학생 정보를 ArrayList<Student> 컬렉션에 저장한 후에, ArrayList<Student>의 모든 학생(4명) 정보를 출력하고 학생 이름을 입력받아 해당 학생의 학점 평균을 출력하는 프로그램을 작성하라.

학생 이름, 학과, 학번, 학점평균 입력하세요.

>> 황기태, 모바일, 1, 4.1
>> 이재문, 안드로이드, 2, 3.9
>> 김남윤, 웹공학, 3, 3.5
>> 최찬미, 빅데이터, 4, 4.25

----------------------------------

이름: 황기태

학과: 모바일

학번: 1

학점평균: 4.1

----------------------------------

이름: 이재문

학과: 안드로이드

학번: 2

학점평균: 3.9

----------------------------------

이름: 김남윤

학과: 웹공학

학번: 3

학점평균: 3.5

----------------------------------

이름: 최찬미

학과: 빅데이터

학번: 4

학점평균: 4.25

----------------------------------

학생 이름 >> 최찬미

최찬미, 빅데이터, 4, 4.25

학생 이름 >> 이재문

이재문, 안드로이드, 2, 3.9

학생 이름 >> 그만
====================================================

5. 개별 진척도 오늘 못한거 정리 해 주세요.








